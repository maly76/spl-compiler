package de.thm.mni.compilerbau.phases._02_03_parser;

import java_cup.runtime.*;
import de.thm.mni.compilerbau.utils.*;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;

parser code {:
  public void syntax_error(Symbol currentToken){
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right));
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

/* Non-terminals */
terminal Identifier IDENT;    //Identifiers
terminal Integer INTLIT;      //Integer literals

non terminal Program program;
non terminal List<GlobalDeclaration> glob_dec_list;
non terminal GlobalDeclaration glob_dec;

non terminal ProcedureDeclaration proc_dec;
non terminal TypeDeclaration gvar_dec;
non terminal List<ParameterDeclaration> par_dec_list;
non terminal ParameterDeclaration par_dec;
non terminal List<VariableDeclaration> var_dec_list;
non terminal VariableDeclaration var_dec;
non terminal TypeExpression type;

non terminal List<Statement> stm_list;
non terminal Statement stm;

non terminal AssignStatement asgn_dec;
non terminal IfStatement if_stm;
non terminal WhileStatement while_stm;
non terminal CallStatement call_stm;



non terminal BinaryExpression.Operator com_operator;
non terminal List<Expression> trans_dec_list;
non terminal Expression exp;
non terminal Expression add_exp;
non terminal Expression mul_exp;
non terminal Expression unary_exp;
non terminal Expression primary_exp;


non terminal Variable var;
non terminal IntLiteral intlit;

start with program;

program ::= glob_dec_list: list {: RESULT = new Program(new Position(listleft, listright), list);:} ;

glob_dec_list ::= /* empty */{: RESULT = List.nil() ;:}|
                  glob_dec: gdec glob_dec_list: gdeclist {: RESULT = List.cons(gdec, gdeclist);:};
glob_dec ::=  gvar_dec:gvar_d {:RESULT = gvar_d;:} |
              proc_dec: proc_d {:RESULT = proc_d;:};



proc_dec ::= PROC:p IDENT:i LPAREN par_dec_list:pl RPAREN LCURL var_dec_list:vl stm_list:sl RCURL {:RESULT = new ProcedureDeclaration(new Position(pleft, pright), i, pl, vl, sl);:};

gvar_dec ::= TYPE:ty IDENT:i EQ type:t SEMIC{:RESULT = new TypeDeclaration(new Position(tyleft, tyright), i, t);:};

par_dec_list ::=  /* empty */ {:RESULT = List.nil();:} |
                  par_dec: par_decd {:RESULT = List.cons(par_decd, List.nil());:} | //diese zeile muss vllt weg
                  par_dec: par_decd COMMA par_dec_list: par_list {:RESULT = List.cons(par_decd, par_list);:};
par_dec ::= IDENT:i COLON type:t {:RESULT = new ParameterDeclaration(new Position(ileft, iright), i, t, false);:}|
            REF IDENT:i COLON type:t {:RESULT = new ParameterDeclaration(new Position(ileft, iright), i, t, true);:};

var_dec_list ::= /*empty*/ {:RESULT = List.nil();:} |
                 var_dec:var var_dec_list:vdl {:RESULT = List.cons(var, vdl);:};
var_dec ::= VAR:v IDENT:i COLON type: t SEMIC {:RESULT = new VariableDeclaration(new Position(vleft, vright), i, t);:};

type ::= ARRAY:a LBRACK INTLIT:i RBRACK OF type:t {: RESULT = new ArrayTypeExpression(new Position(aleft, aright), t, i);:} |
         IDENT:id {:RESULT = new NamedTypeExpression(new Position(idleft,idright), id);:};



stm_list ::= /* empty */ {:RESULT = List.nil();:}|
         stm: stm_d stm_list: stm_list{:RESULT = List.cons(stm_d, stm_list);:};
stm  ::= asgn_dec: ad {:RESULT = ad;:}|
         if_stm: is {:RESULT = is;:} |
         call_stm: cs {:RESULT = cs;:} | //funtkionstatement
         while_stm: ws {:RESULT = ws;:} |
         LCURL stm_list: s RCURL {:RESULT = new CompoundStatement(new Position(sleft, sright), s);:} |
         SEMIC: se {:RESULT = new EmptyStatement(new Position(seleft, seright));:};

asgn_dec ::= var: v ASGN add_exp: exp SEMIC{:RESULT = new AssignStatement(new Position(vleft, vright), v, exp);:};

if_stm ::= IF:i LPAREN exp:exp RPAREN stm:stm {:RESULT = new IfStatement(new Position(ileft, iright), exp, stm, new EmptyStatement(Position.ERROR_POSITION));:} |
           IF:i LPAREN exp:exp RPAREN stm:stm ELSE stm:elsepart{:RESULT = new IfStatement(new Position(ileft, iright), exp, stm, elsepart);:};

while_stm ::= WHILE:w LPAREN exp:exp  RPAREN stm:stm{:RESULT = new WhileStatement(new Position(wleft, wright), exp, stm);:} ;

call_stm ::= IDENT: i LPAREN trans_dec_list: arg_list RPAREN SEMIC {:RESULT = new CallStatement(new Position(ileft, iright), i, arg_list);:};



com_operator ::= LT {:RESULT = BinaryExpression.Operator.LST;:} |
                 LE {:RESULT = BinaryExpression.Operator.LSE;:} |
                 GT {:RESULT = BinaryExpression.Operator.GRT;:} |
                 GE {:RESULT = BinaryExpression.Operator.GRE;:} |
                 NE {:RESULT = BinaryExpression.Operator.NEQ;:} |
                 EQ {:RESULT = BinaryExpression.Operator.EQU;:};

trans_dec_list ::=  /* empty */ {:RESULT = List.nil();:} |
                    add_exp: ex {:RESULT = List.cons(ex, List.nil());:} |
                    add_exp: ex COMMA trans_dec_list: tdl {:RESULT = new List(ex, tdl);:};
exp ::= add_exp:lo com_operator:o add_exp:ro {:RESULT = new BinaryExpression(new Position(loleft, loright), o, lo, ro);:};

add_exp	::= mul_exp:me {:RESULT = me;:} |
            add_exp:lo PLUS mul_exp:ro {:RESULT = new BinaryExpression(new Position(loleft, loright), BinaryExpression.Operator.ADD, lo, ro);:} |
            add_exp:lo MINUS mul_exp:ro {:RESULT = new BinaryExpression(new Position(loleft, loright), BinaryExpression.Operator.SUB, lo, ro);:};
mul_exp ::= unary_exp:ue {:RESULT = ue;:} |
            mul_exp:lo STAR unary_exp:ro {:RESULT = new BinaryExpression(new Position(loleft, loright), BinaryExpression.Operator.MUL, lo, ro);:} |
            mul_exp:lo SLASH unary_exp:ro {:RESULT = new BinaryExpression(new Position(loleft, loright), BinaryExpression.Operator.DIV, lo, ro);:};
unary_exp ::= primary_exp:pe {:RESULT = pe;:} |
              MINUS unary_exp:u {:RESULT = new BinaryExpression(new Position(uleft, uright), BinaryExpression.Operator.SUB, new IntLiteral(new Position(uleft, uright),0), u);:};
primary_exp ::=  LPAREN add_exp:i RPAREN {:RESULT = i;:} |
                 intlit: i {:RESULT = i;:} |
                 var: i {:RESULT = new VariableExpression(new Position(ileft, iright), i);:};


var ::= IDENT: i {:RESULT = new NamedVariable(new Position(ileft, iright), i);:} |
        var:v LBRACK add_exp:ae RBRACK {:RESULT = new ArrayAccess(new Position(vleft, vright), v, ae);:};

intlit ::= INTLIT: i {:RESULT = new IntLiteral(new Position(ileft, iright), i);:};